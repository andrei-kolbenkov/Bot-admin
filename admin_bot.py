from aiogram import Bot, Dispatcher, types
from aiogram.types import ChatMemberUpdated, Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery, InputMediaPhoto, FSInputFile, ChatPermissions, ContentType
from aiogram.filters import ChatMemberUpdatedFilter, Command
from aiogram.fsm.context import FSMContext
from aiogram.filters.state import StateFilter, State, StatesGroup
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import asyncio
from datetime import time, datetime, timedelta
import re
import os
import json
import logging

API_TOKEN = ""
ADMIN_CHAT_ID = [700000000]
CHAT_ID = -10000000000

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

logging.basicConfig(level=logging.INFO)

# –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å—Å—ã–ª–∫–∏
allowed_users = set()

START = "üü¢ –ú–æ–¥–µ—Ä–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞"
END = "üõë –ú–æ–¥–µ—Ä–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞"
ACTIVE = True


# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –≤ —á–∞—Ç–µ
LAST_MESSAGE_OBS = {}
LAST_MESSAGE_LINK = {}
LAST_MESSAGE_REP = {}


OBS_MES_FILE = "obs_mes.txt"
def load_message_obs():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞."""
    if not os.path.exists(OBS_MES_FILE):
        with open(OBS_MES_FILE, "w", encoding="utf-8") as file:
            file.write("–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    with open(OBS_MES_FILE, "r", encoding="utf-8") as file:
        return file.read().strip()

def save_message_obs(new_message):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–∞–π–ª."""
    with open(OBS_MES_FILE, "w", encoding="utf-8") as file:
        file.write(new_message)



REP_MES_FILE = "rep_mes.txt"
def load_message_rep():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞."""
    if not os.path.exists(REP_MES_FILE):
        with open(REP_MES_FILE, "w", encoding="utf-8") as file:
            file.write("–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    with open(REP_MES_FILE, "r", encoding="utf-8") as file:
        return file.read().strip()

def save_message_rep(new_message):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–∞–π–ª."""
    with open(REP_MES_FILE, "w", encoding="utf-8") as file:
        file.write(new_message)


LINK_MES_FILE = "link_mes.txt"
def load_message_link():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞."""
    if not os.path.exists(LINK_MES_FILE):
        with open(LINK_MES_FILE, "w", encoding="utf-8") as file:
            file.write("–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    with open(LINK_MES_FILE, "r", encoding="utf-8") as file:
        return file.read().strip()

def save_message_link(new_message):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–∞–π–ª."""
    with open(LINK_MES_FILE, "w", encoding="utf-8") as file:
        file.write(new_message)



NMB_MES_FILE = "nmb_mes.txt"
def load_message_nmb():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞."""
    if not os.path.exists(NMB_MES_FILE):
        with open(NMB_MES_FILE, "w", encoding="utf-8") as file:
            file.write("–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    with open(NMB_MES_FILE, "r", encoding="utf-8") as file:
        return file.read().strip()

def save_message_nmb(new_message):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–∞–π–ª."""
    with open(NMB_MES_FILE, "w", encoding="utf-8") as file:
        file.write(new_message)



NIGHT_MES_FILE = "night_mes.txt"
def load_message_night():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞."""
    if not os.path.exists(NIGHT_MES_FILE):
        with open(NIGHT_MES_FILE, "w", encoding="utf-8") as file:
            file.write("–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    with open(NIGHT_MES_FILE, "r", encoding="utf-8") as file:
        return file.read().strip()

def save_message_night(new_message):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–∞–π–ª."""
    with open(NIGHT_MES_FILE, "w", encoding="utf-8") as file:
        file.write(new_message)


# –õ–∏–º–∏—Ç –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
ADD_LIMIT = 30  # –ú–∞–∫—Å–∏–º—É–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —á–∞—Å
add_log = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–π: {chat_id: [(user_id, timestamp), ...]}

user_messages = {}

scheduler = AsyncIOScheduler()

# –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Å—ã–ª–æ–∫
LINK_PATTERN = re.compile(
    r"(?i)"  # –ò–≥–Ω–æ—Ä —Ä–µ–≥–∏—Å—Ç—Ä–∞
    r"(?:https?|ftp):\/\/[^\s/$.?#].[^\s]*"  # –°—Å—ã–ª–∫–∏ —Å –ø—Ä–æ—Ç–æ–∫–æ–ª–∞–º–∏
    r"|www\.[^\s/$.?#].[^\s]*"               # –°—Å—ã–ª–∫–∏ —Å www
    r"|(?:\S+\.(ru|com|net|org|info|biz|edu|gov|io|me|ua|by|kz|uz|tk))\b"  # –Ø–≤–Ω—ã–µ –¥–æ–º–µ–Ω–Ω—ã–µ –∑–æ–Ω—ã
    r"|@\w+"                                # –£–ø–æ–º–∏–Ω–∞–Ω–∏—è
    r"|t\.me\/\S+"                          # Telegram —Å—Å—ã–ª–∫–∏
    r"|\b\d{1,3}(\.\d{1,3}){3}\b"           # IP-–∞–¥—Ä–µ—Å–∞
)

PHONE_PATTERN = re.compile(r'(?:\+7|8)9\d{9}')

BAD_WORDS_FILE = "obscenity.txt"
# –ß—Ç–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤
def load_bad_words():
    if not os.path.exists(BAD_WORDS_FILE):
        with open(BAD_WORDS_FILE, "w", encoding="utf-8") as file:
            file.write("")  # –°–æ–∑–¥–∞—ë–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    with open(BAD_WORDS_FILE, "r", encoding="utf-8") as file:
        content = file.read()
        return {word.strip().lower() for word in content.split(",") if word.strip()}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤
def save_bad_words(words):
    with open(BAD_WORDS_FILE, "w", encoding="utf-8") as file:
        file.write("\n".join(sorted(words)))

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
bad_words = load_bad_words()


DATA_FILE = "users.json"
# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
def load_user_message_count():
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as file:
            return json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
def save_user_message_count(data):
    with open(DATA_FILE, "w", encoding="utf-8") as file:
        json.dump(data, file, ensure_ascii=False, indent=4)


ADMIN_LIST_FILE = "alist.txt"
def load_alist():
    if not os.path.exists(ADMIN_LIST_FILE):
        with open(ADMIN_LIST_FILE, "w", encoding="utf-8") as file:
            file.write("")  # –°–æ–∑–¥–∞—ë–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    with open(ADMIN_LIST_FILE, "r", encoding="utf-8") as file:
        # –ß–∏—Ç–∞–µ–º —Å—Ç—Ä–æ–∫–∏, —É–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        return [line.strip().lower() for line in file if line.strip()]

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤
def save_alist(users_text):
    # –†–∞–∑–¥–µ–ª—è–µ–º –≤—Ö–æ–¥–Ω–æ–π —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏, —É–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    users = [line.strip() for line in users_text.splitlines() if line.strip()]
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    with open(ADMIN_LIST_FILE, "w", encoding="utf-8") as file:
        file.write("\n".join(sorted(set(users))))



COUNT_NUMBER_FROM_USER = 10







class Form(StatesGroup):
    allow = State()
    revoke = State()
    number = State()
    obs = State()
    limit = State()
    mes_obs = State()
    mes_link = State()
    mes_nmb = State()
    mes_rep = State()
    mes_night = State()
    alist = State()



@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    if message.chat.type == "private":
        welcome_text = "üëã –ü—Ä–∏–≤–µ—Ç!"
        await message.answer(welcome_text)


# /admin
@dp.message(Command('admin'))
async def admin_panel(message: types.Message):
    if message.chat.type == "private":
        if message.chat.id in ADMIN_CHAT_ID:
            await message.answer("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=admin_kb())
        else:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")



@dp.callback_query(lambda c: c.data and c.data.startswith('admin_'))
async def admin_callback_handler(callback_query: CallbackQuery, state: FSMContext):
    data = callback_query.data
    if data == 'admin_allow':
        await state.set_state(Form.allow)
        await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ ID:")
    elif data == 'admin_revoke':
        await state.set_state(Form.revoke)
        await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ ID:")
    elif data == 'admin_number':
        await state.set_state(Form.number)
        await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –æ—Ç –æ–¥–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    elif data == 'admin_obs':
        await state.set_state(Form.obs)
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ —Å –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏."""
        await bot.send_document(callback_query.from_user.id, types.FSInputFile(BAD_WORDS_FILE), caption="–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ .txt")
    elif data == 'admin_limit':
        await state.set_state(Form.limit)
        await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–±–∞–≤–ª—è–µ–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —á–∞—Å:")
    elif data == 'admin_message':
        await bot.send_message(callback_query.from_user.id, text='–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:', reply_markup=message_kb())
    elif data == 'admin_list':
        await state.set_state(Form.alist)
        text = f''
        for name in load_alist():
            text += f'{name}\n'
        text += f'\n–í–≤–µ–¥–∏—Ç–µ @username –∏–ª–∏ ID –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–∞–∂–¥–æ–≥–æ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏:'
        await bot.send_message(callback_query.from_user.id, text=text)
    else:
        await bot.answer_callback_query(callback_query.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@dp.callback_query(lambda c: c.data and c.data == 'back')
async def back_callback_handler(callback_query: CallbackQuery):
    await bot.send_message(callback_query.message.chat.id, "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",  reply_markup=admin_kb())
    await bot.answer_callback_query(callback_query.id)




@dp.callback_query(lambda c: c.data == 'change_obs_mes')
async def update_mes_obs(callback_query: types.CallbackQuery, state: FSMContext):
    await state.set_state(Form.mes_obs)  # Set the state
    text = f'{load_message_obs()}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:'
    await bot.send_message(callback_query.from_user.id, text)

@dp.message(StateFilter(Form.mes_obs))
async def update_mes_obs2(message: types.Message, state: FSMContext):
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
        new_message = message.text
        save_message_obs(new_message)
        await message.answer(f'–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ', reply_markup=message_kb())
    finally:
        await state.clear()  # Finish the state



@dp.callback_query(lambda c: c.data == 'change_rep_mes')
async def update_mes_obs(callback_query: types.CallbackQuery, state: FSMContext):
    await state.set_state(Form.mes_rep)  # Set the state
    text = f'{load_message_rep()}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:'
    await bot.send_message(callback_query.from_user.id, text)

@dp.message(StateFilter(Form.mes_rep))
async def update_mes_obs2(message: types.Message, state: FSMContext):
    try:
        save_message_rep(message.text)
        await message.answer(f'–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ', reply_markup=message_kb())
    finally:
        await state.clear()  # Finish the state




@dp.callback_query(lambda c: c.data == 'change_link_mes')
async def update_mes_obs(callback_query: types.CallbackQuery, state: FSMContext):
    await state.set_state(Form.mes_link)  # Set the state
    text = f'{load_message_link()}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:'
    await bot.send_message(callback_query.from_user.id, text)

@dp.message(StateFilter(Form.mes_link))
async def update_mes_obs2(message: types.Message, state: FSMContext):
    try:
        save_message_link(message.text)
        await message.answer(f'–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ', reply_markup=message_kb())
    finally:
        await state.clear()  # Finish the state




@dp.callback_query(lambda c: c.data == 'change_nmb_mes')
async def update_mes_obs(callback_query: types.CallbackQuery, state: FSMContext):
    await state.set_state(Form.mes_nmb)  # Set the state
    text = f'{load_message_nmb()}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:'
    await bot.send_message(callback_query.from_user.id, text)

@dp.message(StateFilter(Form.mes_nmb))
async def update_mes_obs2(message: types.Message, state: FSMContext):
    try:
        save_message_nmb(message.text)
        await message.answer(f'–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ', reply_markup=message_kb())
    finally:
        await state.clear()  # Finish the state



@dp.callback_query(lambda c: c.data == 'change_night_mes')
async def update_mes_obs(callback_query: types.CallbackQuery, state: FSMContext):
    await state.set_state(Form.mes_night)  # Set the state
    text = f'{load_message_night()}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –º–µ—Ö–∞–Ω–∏–∑–º —Å—Å—ã–ª–æ–∫:'
    await bot.send_message(callback_query.from_user.id, text, disable_web_page_preview=True)

@dp.message(StateFilter(Form.mes_night))
async def update_mes_obs2(message: types.Message, state: FSMContext):
    try:
        save_message_night(message.text)
        await message.answer(f'–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ', reply_markup=message_kb())
    finally:
        await state.clear()  # Finish the state




@dp.callback_query(lambda c: c.data == 'astart')
async def update_mes_obs(callback_query: types.CallbackQuery):
    global ACTIVE
    if ACTIVE is True:
        ACTIVE = False
    else:
        ACTIVE = True
    if callback_query.from_user.id in ADMIN_CHAT_ID:
        await callback_query.message.answer("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=admin_kb())




@dp.message(StateFilter(Form.alist))
async def update_mes_obs2(message: types.Message, state: FSMContext):
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
        new_message = message.text
        save_alist(new_message)
        await message.answer(f'–°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–±–Ω–æ–≤–ª–µ–Ω', reply_markup=admin_kb())
    finally:
        await state.clear()  # Finish the state



@dp.message(StateFilter(Form.allow))
async def process_post_product(message: types.Message, state: FSMContext):
    try:
        input_data = message.text.strip()
        if input_data.isdigit():  # –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç—Ç–æ ID
            user_id = int(input_data)
            allowed_users.add(user_id)
            user_message_count = load_user_message_count()
            user_message_count[user_id] = user_message_count.get(user_id, 0) - 1
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
            save_user_message_count(user_message_count)
            await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {user_id} —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å—Å—ã–ª–∫–∏ –∏–ª–∏ –Ω–æ–º–µ—Ä.", reply_markup=admin_kb())
        elif input_data.startswith("@") and len(input_data) > 2:  # –ï—Å–ª–∏ –≤–≤–µ–¥—ë–Ω –Ω–∏–∫–Ω–µ–π–º
            username = input_data[1:]
            allowed_users.add(username)
            user_message_count = load_user_message_count()
            user_message_count[username] = user_message_count.get(username, 0) - 1
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
            save_user_message_count(user_message_count)
            await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {input_data} —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å—Å—ã–ª–∫–∏ –∏–ª–∏ –Ω–æ–º–µ—Ä.", reply_markup=admin_kb())
        else:
            # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–∏ ID, –Ω–∏ –Ω–∏–∫–Ω–µ–π–º—É
            await message.reply(
                "–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã) –∏–ª–∏ Username (–Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å '@' –∏ –¥–ª–∏–Ω–Ω–µ–µ 2 —Å–∏–º–≤–æ–ª–æ–≤).",
                reply_markup=admin_kb(),
            )
    finally:
        await state.clear()
    print(allowed_users)



@dp.message(StateFilter(Form.revoke))
async def process_post_product(message: types.Message, state: FSMContext):
    try:
        input_data = message.text.strip()
        if input_data.isdigit():  # –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç—Ç–æ ID
            user_id = int(input_data)
            if user_id in allowed_users:
                allowed_users.discard(user_id)
                await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {user_id} –∑–∞–ø—Ä–µ—â–µ–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å—Å—ã–ª–∫–∏ –∏–ª–∏ –Ω–æ–º–µ—Ä.", reply_markup=admin_kb())
            else:
                await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö.", reply_markup=admin_kb())
        elif input_data.startswith("@") and len(input_data) > 2:  # –ï—Å–ª–∏ –≤–≤–µ–¥—ë–Ω –Ω–∏–∫–Ω–µ–π–º
            username = input_data[1:]
            if username in allowed_users:
                allowed_users.discard(username)
                await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {input_data} –∑–∞–ø—Ä–µ—â–µ–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å—Å—ã–ª–∫–∏ –∏–ª–∏ –Ω–æ–º–µ—Ä.", reply_markup=admin_kb())
            else:
                await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {input_data} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö.", reply_markup=admin_kb())
        else:
            # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–∏ ID, –Ω–∏ –Ω–∏–∫–Ω–µ–π–º—É
            await message.reply(
                "–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã) –∏–ª–∏ Username (–Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å '@' –∏ –¥–ª–∏–Ω–Ω–µ–µ 2 —Å–∏–º–≤–æ–ª–æ–≤).",
                reply_markup=admin_kb(),
            )
    finally:
        await state.clear()
    print(allowed_users)


@dp.message(StateFilter(Form.number))
async def process_post_product(message: types.Message, state: FSMContext):
    global COUNT_NUMBER_FROM_USER
    try:
        old_count = COUNT_NUMBER_FROM_USER
        COUNT_NUMBER_FROM_USER = int(message.text)
        user_message_count = load_user_message_count()
        for user, count in user_message_count.items():
            if count >= old_count:
                if count >= COUNT_NUMBER_FROM_USER:
                    user_message_count[user] = COUNT_NUMBER_FROM_USER
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
        save_user_message_count(user_message_count)
        await message.answer(f'–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ —Å –Ω–æ–º–µ—Ä–æ–º - {int(message.text)}', reply_markup=admin_kb())
    except ValueError:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ.', reply_markup=admin_kb())
    finally:
        await state.clear()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
@dp.message(StateFilter(Form.obs))
async def process_new_bad_words_file(message: Message, state: FSMContext):
    if message.document:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ —Å –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏."""
        file = message.document
        file_path = f"{file.file_name}"

        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        await bot.download(file, file_path)

        # –ß—Ç–µ–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤
        try:
            with open(file_path, "r", encoding="utf-8") as f:
                new_bad_words = {line.strip().lower() for line in f if line.strip()}
            bad_words.update(new_bad_words)
            save_bad_words(bad_words)
            await message.answer("–°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤ –æ–±–Ω–æ–≤–ª—ë–Ω.", reply_markup=admin_kb())
        except Exception as e:
            await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
        finally:
            if file_path != BAD_WORDS_FILE:
                os.remove(file_path)  # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            await state.clear()
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏.")





def has_entities(message: Message) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Å—Å—ã–ª–æ–∫ –≤ entities."""
    if message.entities:
        for entity in message.entities:
            if entity.type in ("url", "text_link"):  # URL –∏–ª–∏ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏
                return True
    return False

@dp.message(lambda message: (message.text or message.caption) and (LINK_PATTERN.search(message.text or message.caption) or has_entities(message) if message.text or message.caption else False))
async def handle_links(message: Message):
    if ACTIVE is True:
        if (message.from_user.id not in ADMIN_CHAT_ID) and (str(message.from_user.id) not in load_alist()) and (message.from_user.username not in load_alist()):
            print(load_alist())
            if message.chat.type != "private":
                """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Å—Å—ã–ª–∫–∞–º–∏."""
                global LAST_MESSAGE_LINK
                print('print(LAST_MESSAGE_LINK)')
                print(LAST_MESSAGE_LINK)
                print(message.text or message.caption)
                username = message.from_user.username
                user_id = message.from_user.id
                chat_id = message.chat.id
                if (username not in allowed_users) and (user_id not in allowed_users):
                    await message.delete()
                    new_message = await message.answer(load_message_link())

                    # if chat_id in LAST_MESSAGE_LINK:
                    #     try:
                    #         await bot.delete_message(chat_id=chat_id, message_id=LAST_MESSAGE_LINK[chat_id])
                    #     except Exception as e:
                    #         print(e)
                    # LAST_MESSAGE_LINK[chat_id] = new_message.message_id
                    # print(LAST_MESSAGE_LINK)

                    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
                    asyncio.create_task(delete_message_later(chat_id, new_message.message_id))
                else:
                    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω–æ–π —Å—Å—ã–ª–∫–∏
                    if username in allowed_users:
                        allowed_users.discard(username)
                        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –Ω–æ–º–µ—Ä–∞–º–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        user_message_count = load_user_message_count()
                        user_message_count[username] = user_message_count.get(username, 0) + 1
                    else:
                        allowed_users.discard(user_id)
                        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –Ω–æ–º–µ—Ä–∞–º–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        user_message_count = load_user_message_count()
                        user_message_count[user_id] = user_message_count.get(user_id, 0) + 1
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
                    save_user_message_count(user_message_count)




@dp.message(lambda message: PHONE_PATTERN.search(message.text or message.caption) if message.text or message.caption else False)
async def check_phone_numbers(message: Message):
    if ACTIVE is True:
        if (message.from_user.id not in ADMIN_CHAT_ID) and (str(message.from_user.id) not in load_alist()) and (message.from_user.username not in load_alist()):
            if message.chat.type != "private":
                user_id = message.from_user.id
                username = message.from_user.username
                chat_id = message.chat.id
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –Ω–æ–º–µ—Ä–∞–º–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_message_count = load_user_message_count()
                if username and user_message_count[username]:
                    user_message_count[username] = user_message_count.get(username, 0) + 1
                    # –£–¥–∞–ª—è–µ–º —Ç–∞–∫–∂–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Å—ã–ª–∫–∏
                    allowed_users.discard(username)

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –ª–∏–º–∏—Ç
                    if user_message_count[username] > COUNT_NUMBER_FROM_USER:
                        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–µ–≤—ã—à–∞—é—â–µ–µ –ª–∏–º–∏—Ç
                        new_message = await message.answer(load_message_nmb())
                        await message.delete()
                        asyncio.create_task(delete_message_later(chat_id, new_message.message_id))
                    else:
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
                        save_user_message_count(user_message_count)
                else:
                    user_message_count[user_id] = user_message_count.get(user_id, 0) + 1
                    # –£–¥–∞–ª—è–µ–º —Ç–∞–∫–∂–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Å—ã–ª–∫–∏
                    allowed_users.discard(user_id)

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –ª–∏–º–∏—Ç
                    if user_message_count[user_id] > COUNT_NUMBER_FROM_USER:
                        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–µ–≤—ã—à–∞—é—â–µ–µ –ª–∏–º–∏—Ç
                        new_message = await message.answer(load_message_nmb())
                        await message.delete()
                        asyncio.create_task(delete_message_later(chat_id, new_message.message_id))
                    else:
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
                        save_user_message_count(user_message_count)



                    # await message.answer(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø—Ä–∏–Ω—è—Ç–æ. –ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –ª–∏–º–∏—Ç ‚Äî {COUNT_NUMBER_FROM_USER} —Å–æ–æ–±—â–µ–Ω–∏—è.")



def contains_bad_words(text, bad_words):
    pattern = r'\b(?:' + '|'.join(re.escape(word) for word in bad_words) + r')\b'
    return re.search(pattern, text.lower()) is not None

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –º–∞—Ç–∞–º–∏
@dp.message(lambda message: contains_bad_words(message.text or message.caption, bad_words) if message.text or message.caption else False)
async def delete_bad_words(message: Message):
    if ACTIVE is True:
        if message.chat.type != "private":
            """–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –º–∞—Ç–∞–º–∏."""
            global LAST_MESSAGE_OBS
            print('print(LAST_MESSAGE_OBS)')
            # print(LAST_MESSAGE_OBS)
            print(message.text or message.caption)
            username = message.from_user.username
            chat_id = message.chat.id
            text = f'{load_message_obs()}'
            text = text.replace('username', username)
            await message.delete()
            new_message = await message.answer(text)

            # if chat_id in LAST_MESSAGE_OBS:
            #     await bot.delete_message(chat_id=chat_id, message_id=LAST_MESSAGE_OBS[chat_id])
            # LAST_MESSAGE_OBS[chat_id] = new_message.message_id
            # print(LAST_MESSAGE_OBS)

            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
            asyncio.create_task(delete_message_later(chat_id, new_message.message_id))


@dp.message(lambda message: message.new_chat_members is not None)
async def handle_new_members(message: Message):
    chat_id = message.chat.id
    user_id = message.from_user.id

    if not check_additions(chat_id, user_id):
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≥—Ä—É–ø–ø—ã
        await bot.ban_chat_member(chat_id=chat_id, user_id=user_id)
        # await bot.send_message(
        #     chat_id,
        #     f"–õ–∏–º–∏—Ç –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ({ADD_LIMIT} –≤ —á–∞—Å) –¥–æ—Å—Ç–∏–≥–Ω—É—Ç. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} –Ω–µ –º–æ–∂–µ—Ç –≤—Å—Ç—É–ø–∏—Ç—å."
        # )
        # –†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –æ–Ω –º–æ–≥ —Å–Ω–æ–≤–∞ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –≤—Å—Ç—É–ø–∏—Ç—å –ø–æ–∑–∂–µ
        await bot.unban_chat_member(chat_id=chat_id, user_id=user_id)
    # else:
    #     await bot.send_message(chat_id, f"–ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ {message.from_user.username} –¥–æ–±–∞–≤–ª–µ–Ω.")
    await message.delete()

@dp.message(lambda message: message.left_chat_member is not None)
async def handle_left_members(message: Message):
    # print("""–£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Ö–æ–¥–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞.""")
    await message.delete()

@dp.message(lambda message: message.pinned_message is not None)
async def handle_pinned_message(message: Message):
    # print("""–£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.""")
    await message.delete()



@dp.message()
async def handle_messages(message: Message):
    if ACTIVE is True:
        if (message.from_user.id not in ADMIN_CHAT_ID) and (str(message.from_user.id) not in load_alist()) and (message.from_user.username not in load_alist()):
            if message.chat.type != "private":
                if (message.from_user.username not in allowed_users) and (message.from_user.id not in allowed_users):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
                    if message.content_type in {ContentType.TEXT, ContentType.PHOTO}:
                        user_id = message.from_user.id
                        chat_id = message.chat.id
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ
                        text = message.text or message.caption

                        if text:  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                            global LAST_MESSAGE_REP
                            print('print(LAST_MESSAGE_REP)')
                            print(LAST_MESSAGE_REP)
                            print(text)
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                            if user_id in user_messages and user_messages[user_id] == text:
                                await message.delete()  # –£–¥–∞–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ
                                new_message = await bot.send_message(chat_id, load_message_rep())

                                # if chat_id in LAST_MESSAGE_REP:
                                #     await bot.delete_message(chat_id=chat_id, message_id=LAST_MESSAGE_REP[chat_id])
                                # LAST_MESSAGE_REP[chat_id] = new_message.message_id
                                # print(LAST_MESSAGE_REP)

                                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
                                asyncio.create_task(delete_message_later(chat_id, new_message.message_id))
                            else:
                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                                user_messages[user_id] = text
                else:
                    username = message.from_user.username
                    user_id = message.from_user.id
                    if username in allowed_users:
                        allowed_users.discard(username)
                    else:
                        allowed_users.discard(user_id)




async def delete_message_later(chat_id: int, message_id: int):
    await asyncio.sleep(10)  # –ó–∞–¥–µ—Ä–∂–∫–∞ 30 —Å–µ–∫—É–Ω–¥
    try:
        await bot.delete_message(chat_id=chat_id, message_id=message_id)
    except Exception as e:
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ)
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id}: {e}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏–π
def check_additions(chat_id, user_id):
    now = datetime.now()
    if chat_id not in add_log:
        add_log[chat_id] = []

    # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞
    add_log[chat_id] = [
        (uid, timestamp) for uid, timestamp in add_log[chat_id] if timestamp > now - timedelta(hours=1)
        ]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
    if len(add_log[chat_id]) >= ADD_LIMIT:
        return False  # –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    add_log[chat_id].append((user_id, now))
    return True



# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞
@dp.message(StateFilter(Form.limit))
async def set_limit(message: types.Message, state: FSMContext):
    try:
        global ADD_LIMIT
        ADD_LIMIT = int(message.text)
        await message.reply(f"–õ–∏–º–∏—Ç —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {ADD_LIMIT} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —á–∞—Å.", reply_markup=admin_kb())
    except:
        await message.reply("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥", reply_markup=admin_kb())
    finally:
        await state.clear()




def admin_kb():
    if ACTIVE is True:
        onstart = START
    else:
        onstart = END

    btn_allow = InlineKeyboardButton(text='‚úÖ –†–∞–∑—Ä–µ—à–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Å—Å—ã–ª–∫–∏ –∏–ª–∏ –Ω–æ–º–µ—Ä–∞', callback_data='admin_allow')
    btn_revoke = InlineKeyboardButton(text='‚õîÔ∏è –ó–∞–ø—Ä–µ—Ç–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Å—Å—ã–ª–∫–∏', callback_data='admin_revoke')
    btn_list = InlineKeyboardButton(text='üìù –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', callback_data='admin_list')
    btn_number = InlineKeyboardButton(text=f'üìû –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª. - {COUNT_NUMBER_FROM_USER}', callback_data='admin_number')
    btn_obs = InlineKeyboardButton(text='üîû –§–∞–π–ª –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã—Ö —Å–ª–æ–≤', callback_data='admin_obs')
    btn_limit = InlineKeyboardButton(text='üôã‚Äç‚ôÇÔ∏è –õ–∏–º–∏—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —á–∞—Å', callback_data='admin_limit')
    btn_message = InlineKeyboardButton(text='‚úâÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è', callback_data='admin_message')
    btn_start = InlineKeyboardButton(text=onstart, callback_data='astart')
    admin_kb = InlineKeyboardMarkup(inline_keyboard=[[btn_allow], [btn_revoke], [btn_list], [btn_number], [btn_obs], [btn_limit], [btn_message], [btn_start]])
    return admin_kb

def message_kb():
    btn_obs = InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞ –º–∞—Ç', callback_data='change_obs_mes')
    btn_rep = InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ', callback_data='change_rep_mes')
    btn_link = InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞ —Å—Å—ã–ª–∫—É', callback_data='change_link_mes')
    btn_nmb = InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞', callback_data='change_nmb_mes')
    btn_night = InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è —á–∞—Ç–∞', callback_data='change_night_mes')
    btn_back = InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='back')
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[btn_obs], [btn_rep], [btn_link], [btn_nmb], [btn_night], [btn_back]])
    return keyboard






async def open_chat():
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç —á–∞—Ç –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."""
    permissions = ChatPermissions(can_send_messages=True, can_send_photos=True, can_invite_users=True)
    await bot.set_chat_permissions(chat_id=CHAT_ID, permissions=permissions)
    await bot.send_message(CHAT_ID, "–ß–∞—Ç –æ—Ç–∫—Ä—ã—Ç! üü¢")


async def close_chat():
    """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —á–∞—Ç –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –ø—É–±–ª–∏–∫—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º
    await bot.send_message(CHAT_ID, load_message_night(), disable_web_page_preview=True, parse_mode="Markdown")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞, –∑–∞–ø—Ä–µ—â–∞—é—â–∏–µ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
    permissions = ChatPermissions(can_send_messages=False)
    await bot.set_chat_permissions(chat_id=CHAT_ID, permissions=permissions)


def setup_schedule():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è."""
    scheduler.add_job(open_chat, 'cron', hour=15, minute=57)  # –û—Ç–∫—Ä—ã—Ç—å –≤ 7:00
    scheduler.add_job(close_chat, 'cron', hour=15, minute=56)  # –ó–∞–∫—Ä—ã—Ç—å –≤ 22:00
    scheduler.start()



async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    setup_schedule()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
